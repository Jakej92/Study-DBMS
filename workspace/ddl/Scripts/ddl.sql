/*항상 범위 주석을 사용한다.*/

/*
 * 회원 테이블
 * 
 * 회원 번호
 * 회원 아이디
 * 회원 비밀번호
 * 회원 나이
 * 
 * */

CREATE TABLE TBL_MEMBER(
	ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY, 
	MEMBER_ID VARCHAR2(1000) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
	MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
	MEMBER_AGE NUMBER(3) CONSTRAINT CHECK_AGE CHECK(MEMBER_AGE > 0)
);

/*
 * 주문 테이블
 * 
 * 주문 번호
 * 회원 번호
 * 주문 날짜
 * 주문 개수
 * */
CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   ORDER_DATE DATE DEFAULT SYSDATE,
   ORDER_COUNT NUMBER DEFAULT 1,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);

/*
 * 동물원 테이블
 * 
 * 고유 번호
 * 동물원 이름
 * 동물원 주소
 * 동물원 상세 주소
 * 동물 최대 수용치 
 * */

CREATE TABLE TBL_ZOO(
	ID NUMBER CONSTRAINT PK_ZOO PRIMARY KEY,
	ZOO_NAME VARCHAR2(1000) CONSTRAINT UK_ZOO UNIQUE NOT NULL,
	ZOO_ADDRESS VARCHAR2(1000) NOT NULL,
	ZOO_FULL_ADDRESS VARCHAR2(1000) NOT NULL,
	ZOO_MAX_CAPACITY NUMBER CONSTRAINT CHECK_CAPACITY CHECK(ZOO_MAX_CAPACITY > 0)
);

/*
 * 동물 테이블
 * 
 * 고유 번호(PK)
 * 동물 이름
 * 동물 종류
 * 동물 나이
 * 동물 키
 * 동물 몸무게
 * 동물원 번호(FK) 
 * */
CREATE TABLE TBL_ANIMAL(
	ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
	ZOO_ID NUMBER NOT NULL,
	ANIMAL_NAME VARCHAR2(1000) NOT NULL,
	ANIMAL_TYPE VARCHAR2(1000) CONSTRAINT UK_ANIMAL UNIQUE NOT NULL,
	ANIMAL_AGE NUMBER(3) CONSTRAINT CHECK_ANIMAL_AGE CHECK(ANIMAL_AGE > 0),
	ANIMAL_HEIGHT NUMBER(3) CONSTRAINT CHECK_HEIGHT CHECK(ANIMAL_HEIGHT > 0),
	ANIMAL_WEIGHT NUMBER(4) CONSTRAINT CHECK_WEIGHT CHECK(ANIMAL_WEIGHT > 0),
	CONSTRAINT FK_ANIMAL_ZOO FOREIGN KEY(ZOO_ID)
   	REFERENCES TBL_ZOO(ID)
);

/*
 * 회사와 직원
 */

/* 회사
 * 
 * 고유 번호
 * 회사 이름
 * 회사 주소
 * 회사 번호
 * 회사 타입
 */
CREATE TABLE TBL_COMPANY (
	ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
	COMPANY_NAME VARCHAR2(1000) CONSTRAINT UK_COMPANY_NAME UNIQUE NOT NULL,
	COMPANY_ADDRESS VARCHAR2(1000) NOT NULL,
	COMPANY_PHONE NUMBER NOT NULL,
	COMAPNY_TYPE VARCHAR2(1000) NOT NULL
);

 /* 
 * 직원
 * 
 * 고유 번호
 * 직원 이름
 * 직원 나이
 * 직원 주소
 * 직원의 포지션
 * 회사 고유 번호
 * 
 * */
CREATE TABLE TBL_EMPLOYEE (
	ID NUMBER CONSTRAINT PK_EMPLOYEE PRIMARY KEY,
	EMPLOYEE_NAME VARCHAR2(1000) NOT NULL,
	EMPLOYEE_AGE NUMBER(3) CONSTRAINT CHECK_EMPLOYEE_AGE CHECK(EMPLOYEE_AGE > 0),
	EMPLOYEE_ADDRESS VARCHAR2(1000) NOT NULL,
	EMPLOYEE_POSITION VARCHAR2(1000) NOT NULL,
	COMPANY_ID NUMBER NOT NULL,
	CONSTRAINT FK_EMPLOYEE_COMPANY FOREIGN KEY(COMPANY_ID)
   	REFERENCES TBL_COMPANY(ID)
);

/*
 * 학교와 학생
 * 
 * 학교
 * 
 * 고유 번호
 * 학교 이름
 * 학교 주소
 * 학생 수
 * 학교 반 수
 * 
 * 학생
 * 
 * 고유 번호
 * 학생 이름
 * 학생 나이
 * 학생 학년
 * 학생 반
 * 학생의 학교
 */
CREATE TABLE TBL_SCHOOL (
	ID NUMBER CONSTRAINT PK_SCHOOL PRIMARY KEY,
	SCHOOL_NAME VARCHAR2(1000) CONSTRAINT UK_SCHOOL_NAME UNIQUE NOT NULL,
	SCHOOL_ADDRESS VARCHAR2(1000) NOT NULL,
	SCHOOL_NUMBER_OF_STUDENT NUMBER(4) NOT NULL,
	SCHOOL_NUMBER_OF_CLASS NUMBER(2) NOT NULL
);

CREATE TABLE TBL_STUDENT (
	ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
	STUDUDENT_NAME VARCHAR2(1000) NOT NULL,
	STUDENT_AGE NUMBER(2) CONSTRAINT CHECK_STUDENT_AGE CHECK(STUDENT_AGE > 0),
	STUDENT_GRADE NUMBER(2) CONSTRAINT CHECK_STUDENT_GRADE CHECK(STUDENT_GRADE > 0),
	STUDENT_CLASS NUMBER(2) NOT NULL,
	SCHOOL_ID NUMBER NOT NULL,
	CONSTRAINT FK_STUDENT_SCHOOL FOREIGN KEY(SCHOOL_ID)
	REFERENCES TBL_SCHOOL(ID)
);

/*
 * 병원과 의사
 * 
 * 병원
 * 
 * 고유 번호 PK
 * 병원 이름 UK
 * 병원 주소
 * 전공 분야
 * 병실 수
 */ 
CREATE TABLE TBL_HOSPITAL(
	ID NUMBER CONSTRAINT PK_HOSPITAL PRIMARY KEY,
	HOSPITAL_NAME VARCHAR2(1000) CONSTRAINT UK_HOSPITAL_NAME UNIQUE,
	HOSPITAL_ADDRESS VARCHAR2(1000) NOT NULL,
	HOSPITAL_SPECIALTY VARCHAR2(1000) NOT NULL,
	HOSPITAL_ROOM NUMBER(3) NOT NULL
);

/* 
 * 의사
 * 
 * 의사 고유 번호 PK
 * 의사 이름
 * 전공 과목
 * 근무 병원 FK
 */
CREATE TABLE TBL_DOCTOR(
	ID NUMBER CONSTRAINT PK_DOCTOR PRIMARY KEY,
	DOCTOR_NAME VARCHAR2(1000) NOT NULL,
	DOCTOR_SPECIALIZATION VARCHAR2(1000) NOT NULL,
	HOSPITAL_ID NUMBER NOT NULL,
	CONSTRAINT FK_DOCTOR_HOSPITAL FOREIGN KEY(HOSPITAL_ID)
	REFERENCES TBL_HOSPITAL(ID)
);

/*
 * 	    논리적 설계(논리 모델링)
		회원			주문			상품
		---------------------------------------------------
		번호PK		번호PK		번호PK
		---------------------------------------------------
		이메일U NN	날짜D(SYSDATE)	이름NN
		비밀번호NN		회원번호FK		가격D(0)
		이름NN		상품번호FK		재고D(0)
		주소NN			
		생일		
 * */

CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_NAME VARCHAR2(1000) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(1000) NOT NULL,
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   ORDER_DATE DATE DEFAULT SYSDATE,
   MEMBER_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);


/*
 * 1. 요구사항 분석
 * 	꽃 테이블과 화분 테이블 2개가 필요하고,
 * 	꽃을 구매할 때 화분도 같이 구매합니다.
 * 	꽃은 이름과 색상, 가격이 있고
 * 	화분은 제품번호, 색상, 모양이 있습니다.
 * 	화분은 모든 꽃을 담을 수 없고 정해진 꽃을 담아야 합니다.
 * 
 * 2. 개념 모델링
 * 		꽃 N			화분 1
 * 
 * 		이름			번호
 * 		색상			색상
 * 		가격			모양
 * 		
 * 3. 논리 모델링
 * 		꽃 N			화분 1
 * ------------------------------------
 * 		이름PK		번호PK
 * ------------------------------------
 * 		색상NN		색상NN
 * 		가격NN		모양NN
 * 		화분번호FK
 * 4. 물리 모델링
 * 		TBL_FLOWER						TBL_POT
 * --------------------------------------------------------------
 * 		FLOWER_NAME V2 PK_FLOWER		ID NUMBER PK_POT
 * --------------------------------------------------------------
 * 		FLOWER_COLOR V2 NOT NULL		POT_COLOR V2 NOT NULL
 * 		FLOWER_PRICE NUMBER NOT NULL	POT_SHAPE V2 NOT NULL
 * 		POT_ID NUMBER NOT NULL
 * 
 * 5. 구현
 * 
 * 6. 어려움 고객 추가
 *  
 * 			TBL_CUSTOMER
 * -------------------------
 * 번호		ID NUMBER CONSTRAINT PK_CUSTOMER PRIMARY KEY,
 * 이름		CUSTOMER_NAME V2 NN	
 * 주소		CUSTOMER_ADDRESS V2 NN
 * 핸폰		CUSTOMER_PHONE NUMBER UNIQUE
 * 꽃(FK)	FLOWER_NAME FK 
 * 화분(FK)	POT_ID FK
 * */

CREATE TABLE TBL_FLOWER(
   ID NUMBER CONSTRAINT PK_FLOWER PRIMARY KEY,
   FLOWER_NAME VARCHAR2(1000) NOT NULL,
   FLOWER_COLOR VARCHAR2(1000) NOT NULL,
   FLOWER_PRICE NUMBER DEFAULT 0
);

DROP TABLE TBL_POT;
CREATE TABLE TBL_POT(
   ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
   POT_COLOR VARCHAR2(1000) NOT NULL,
   POT_SHAPE VARCHAR2(1000) NOT NULL,
   FLOWER_ID NUMBER,
   CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_ID)
   REFERENCES TBL_FLOWER(ID)
);

CREATE TABLE TBL_POT(
   ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
   POT_COLOR VARCHAR2(1000) NOT NULL,
   POT_SHAPE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_FLOWER_POT(
   ID NUMBER CONSTRAINT PK_FLOWER_POT PRIMARY KEY,
   FLOWER_ID NUMBER NOT NULL,
   POT_ID NUMBER NOT NULL,
   CONSTRAINT FK_FLOWER_POT_FLOWER FOREIGN KEY(FLOWER_ID)
   REFERENCES TBL_FLOWER(ID),
   CONSTRAINT FK_FLOWER_POT_POT FOREIGN KEY(POT_ID)
   REFERENCES TBL_POT(ID)
);
/*
 * 1. 요구사항 분석
 * 	안녕하세요, 동물병원을 곧 개원하는 원장입니다.
 * 동물은 보호자랑 항상 같이 옵니다. 가끔 보호소에서 오는 동물도 있습니다.
 * 보호자가 여러 마리의 동물을 데리고 올 수 있습니다.
 * 보호자는 이름, 나이, 전화번호, 주소 정보를 알려줘야 하고
 * 동물은 병명, 이름, 나이, 몸무게 정보가 필요합니다.
 * 
 * 2. 개념 모델링
 * 		보호자 1			동물 N		
 * 
 * 		번호				번호 			
 * 		이름				병명			
 * 		나이				이름			
 * 		전번				나이
 * 		주소				몸무게	
 * 						보호자 OR 보호소
 * 3. 논리 모델링
 * 		보호자 1			동물 N		
 * 
 * 		번호	PK			번호 	PK		
 * 		이름				병명			
 * 		나이				이름			
 * 		전번	UK			나이
 * 		주소				몸무게	
 * 						보호자 OR 보호소(FK, NULL)	
 * 4. 물리 모델링
 * 		TBL_GUARDIAN						TBL_ANIMAL
 * --------------------------------------------------------------
 * 		ID NUMBER PK_GUARDIAN				ID NUMBER PK_ANIMAL
 * --------------------------------------------------------------
 * 		GUARDIAN_NAME V2 NOT NULL			ANIMAL_DISEASE V2 NOT NULL
 * 		GUARDIAN_AGE NUMBER NOT NULL		ANIMAL_NAME V2 NOT NULL
 * 		GUARDIAN_PHONE NUMBER UK NOT NULL	ANIMAL_AGE NUMBER
 * 		GUARDIAN_ADDRESS V2 NOT NULL		ANIMAL_WEIGHT 
 * 											GUARDIAN_ID FK 
 * 5. 구현
 * 
 */

/*
CREATE TABLE TBL_GUARDIAN(
	ID NUMBER CONSTRAINT PK_GUARDIAN PRIMARY KEY,
	GUARDIAN_NAME VARCHAR2(1000) NOT NULL,
	GUARDIAN_AGE NUMBER(3) NOT NULL,
	GUARDIAN_PHONE NUMBER UNIQUE NOT NULL,
	GUARDIAN_ADDRESS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_ANIMAL(
	ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
	ANIMAL_DISEASE VARCHAR2(1000),
	ANIMAL_NAME VARCHAR2(1000) NOT NULL,
	ANIMAL_AGE NUMBER(3),
	ANIMAL_WEIGHT NUMBER(3),
	GUARDIAN_ID NUMBER,
	CONSTRAINT FK_ANIMAL_GUARDIAN FOREIGN KEY(GUARDIAN_ID)
	REFERENCES TBL_GUARDIAN(ID)
);
*/



 /* 2. 개념 모델링
 * 		쉘터				쉘터 동물 N		
 * 
 * 		번호				번호 			
 * 		이름				병명			
 * 		전번				이름			
 * 		주소				나이
 * 						몸무게	
 * 						보호소
 * 3. 논리 모델링
 * 		보호소 1			동물 N		
 * 
 * 		번호	PK			번호 	PK		
 * 		이름				병명			
 * 		전번	UK			이름			
 * 		주소				나이
 * 						몸무게	
 * 						보호소(FK, NULL)	
 * 4. 물리 모델링
 * 		TBL_SHELTER							TBL_SHERTER_ANIMAL
 * --------------------------------------------------------------
 * 		ID NUMBER PK_SHELTER				ID NUMBER PK_SHERTER_ANIMAL
 * --------------------------------------------------------------
 * 		SHELTER_NAME V2 NOT NULL			SHERTER_ANIMAL_DISEASE V2 NOT NULL
 * 		SHELTER_PHONE NUMBER UK NOT NULL	SHERTER_ANIMAL_NAME V2 NOT NULL
 * 		SHELTER_ADDRESS V2 NOT NULL			ASHERTER_ANIMAL_AGE NUMBER
 * 											SHERTER_ANIMAL_WEIGHT 
 * 											SHERTER_ID FK 
 * 5. 구현
 * 
 */

/*
CREATE TABLE TBL_SHELTER(
	ID NUMBER CONSTRAINT PK_SHELTER PRIMARY KEY,
	SHELTER_NAME VARCHAR2(1000) NOT NULL,
	SHELTER_ADDRESS VARCHAR2(1000) NOT NULL,
	SHELTER_PHONE NUMBER UNIQUE NOT NULL
);

CREATE TABLE TBL_SHELTER_ANIMAL(
	ID NUMBER CONSTRAINT PK_ANIMALS PRIMARY KEY,
	SHELTER_ANIMAL_DISEASE VARCHAR2(1000),
	SHELTER_ANIMAL_NAME VARCHAR2(1000) NOT NULL,
	SHELTER_ANIMAL_AGE NUMBER(3),
	SHELTER_ANIMAL_WEIGHT NUMBER(3),
	SHELTER_ID NUMBER,
	CONSTRAINT FK_SHELTER_ANIMAL_SHELTER FOREIGN KEY(SHELTER_ID)
	REFERENCES TBL_SHELTER(ID)
);
*/

/*CREATE TABLE TBL_ANIMAL_HOSPITAL(
	ID NUMBER CONSTRAINT PK_ANIMAL_HOSPITAL PRIMARY KEY,
	SHELTER_ANIMAL_ID NUMBER,
	CONSTRAINT FK_HOSPITAL_SHELTER_ANIMAL FOREIGN KEY(SHELTER_ANIMAL_ID)
	REFERENCES TBL_SHELTER_ANIMAL(ID),
	ANIMAL_ID NUMBER,
	CONSTRAINT FK_ANIMAL_HOSPITAL_ANIMAL FOREIGN KEY(ANIMAL_ID)
	REFERENCES TBL_ANIMAL(ID)
);*/

/*
 * 1. 요구사항 분석
 *    안녕하세요, 동물병원을 곧 개원하는 원장입니다.
 *    동물은 보호자랑 항상 같이 옵니다. 가끔 보호소에서 오는 동물도 있습니다.
 *    보호자가 여러 마리의 동물을 데리고 올 수 있습니다.
 *    보호자는 이름, 나이, 전화번호, 주소 정보를 알려줘야 하고
 *    동물은 병명, 이름, 나이, 몸무게 정보가 필요합니다.
 * 
 * 2. 개념 모델링
 * 3. 논리 모델링
 * 4. 물리 모델링
 * 5. 구현 
 * 
 * 쉬운 버전: 한 명의 보호자당 여러 마리의 반려동물이 있다.
 * 어려운 버전: 보호소에서 온 동물은 따로 관리한다.
 * */

/*쉬운 버전*/
CREATE TABLE TBL_OWNER(
   ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
   OWNER_NAME VARCHAR2(1000) NOT NULL,
   OWNER_AGE NUMBER,
   OWNER_PHONE VARCHAR2(1000) NOT NULL,
   OWNER_ADDRESS VARCHAR2(1000) NOT NULL
);

/*ALTER TABLE TBL_OWNER ADD OWNER_ADDRESS VARCHAR2(1000) NOT NULL;*/

CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   PET_NAME VARCHAR2(1000),
   PET_AGE NUMBER DEFAULT 0,
   PET_WEIGHT NUMBER(3, 2) DEFAULT 0.0,
   PET_ILL_NAME VARCHAR2(1000),
   OWNER_ID NUMBER,
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

/*어려운 버전*/
CREATE TABLE TBL_CENTER(
   ID NUMBER CONSTRAINT PK_CENTER PRIMARY KEY,
   CENTER_NAME VARCHAR2(1000) NOT NULL,
   CENTER_PHONE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_ANIMAL(
   ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   PET_NAME VARCHAR2(1000),
   PET_AGE NUMBER DEFAULT 0,
   PET_WEIGHT NUMBER(3, 2) DEFAULT 0.0,
   PET_ILL_NAME VARCHAR2(1000)
);

DROP TABLE TBL_PET;
CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   OWNER_ID NUMBER NOT NULL,
   CONSTRAINT FK_PET_ANIMAL FOREIGN KEY(ID)
   REFERENCES TBL_ANIMAL(ID),
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

DROP TABLE TBL_CENTER_PET;
CREATE TABLE TBL_CENTER_PET(
   ID NUMBER CONSTRAINT PK_CENTER_PET PRIMARY KEY,
   CENTER_ID NUMBER NOT NULL,
   CONSTRAINT FK_CENTER_PET_ANIMAL FOREIGN KEY(ID)
   REFERENCES TBL_ANIMAL(ID),
   CONSTRAINT FK_CENTER_PET_CENTER FOREIGN KEY(CENTER_ID)
   REFERENCES TBL_CENTER(ID)
);

/*
1. 요구 사항
    커뮤니티 게시판을 만들고 싶어요.
    게시판에는 게시글 제목과 게시글 내용, 작성한 시간, 작성자가 있고,
    게시글에는 댓글이 있어서 댓글 내용들이 나와야 해요.
    작성자는 회원(TBL_MEMBER)정보를 그대로 사용해요.
    댓글에도 작성자가 필요해요.

2. 개념 모델링
	게시글						댓글
	번호							번호
	제목							내용
	내용							작성자
	시간
	작성자
	
3. 논리 모델링
	게시글						댓글
	번호PK						번호 PK
	제목							내용
	내용							작성자FK
	시간							게시글 번호FK
	작성자FK
4. 물리 모델링
	TBL_POST					TBL_COMMENTS
	ID(PK)						ID(PK)
	POST_NAME					COMMENTS_CONTENTS
	POST_CONTENTS				MEMBER_ID(FK)
	POST_TIME					POST_ID(FK)
	MEMBER_ID(FK)
5. 구현
*/

/*
CREATE TABLE TBL_POST(
	ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
	POST_NAME VARCHAR2(1000) NOT NULL,
	POST_CONTENTS VARCHAR2(1000) NOT NULL,
	POST_TIME DATE DEFAULT SYSDATE,
	MEMBER_ID NUMBER NOT NULL,
	CONSTRAINT FK_POST_MEMBER FOREIGN KEY(MEMBER_ID)
	REFERENCES TBL_MEMBER(ID)
);

CREATE TABLE TBL_COMMENTS(
	ID NUMBER CONSTRAINT PK_COMMENTS PRIMARY KEY,
	COMMENTS_CONTENTS VARCHAR2(1000) NOT NULL,
	MEMBER_ID NUMBER NOT NULL,
	CONSTRAINT FK_COMMENTS_MEMBER FOREIGN KEY(MEMBER_ID)
	REFERENCES TBL_MEMBER(ID),
	POST_ID NUMBER NOT NULL,
	CONSTRAINT FK_COMMENTS_POST FOREIGN KEY(POST_ID)
	REFERENCES TBL_POST(ID)
);
*/

/*
1. 요구 사항
    커뮤니티 게시판을 만들고 싶어요.
    게시판에는 게시글 제목과 게시글 내용, 작성한 시간, 작성자가 있고,
    게시글에는 댓글이 있어서 댓글 내용들이 나와야 해요.
    작성자는 회원(TBL_MEMBER)정보를 그대로 사용해요.
    댓글에도 작성자가 필요해요.

2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/

CREATE TABLE TBL_POST(
   ID NUMBER CONSTRAINT PK_POST PRIMARY KEY,
   POST_TITLE VARCHAR2(1000) NOT NULL,
   POST_CONTENT VARCHAR2(1000) NOT NULL,
   POST_READ_COUNT NUMBER DEFAULT 0,
   CREATED_DATE DATE DEFAULT SYSDATE,
   MEMBER_ID NUMBER NOT NULL,
   CONSTRAINT FK_POST_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);

CREATE TABLE TBL_REPLY(
   ID NUMBER CONSTRAINT PK_REPLY PRIMARY KEY,
   REPLY_CONTENT VARCHAR2(1000),
   CREATED_DATE DATE DEFAULT SYSDATE,
   MEMBER_ID NUMBER NOT NULL,
   POST_ID NUMBER NOT NULL,
   CONSTRAINT FK_REPLY_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_REPLY_POST FOREIGN KEY(POST_ID)
   REFERENCES TBL_POST(ID)
);


/*
1. 요구 사항
    마이페이지에서 회원 프로필을 구현하고 싶습니다.
    회원당 프로필을 여러 개 설정할 수 있고,
    대표 이미지로 선택된 프로필만 화면에 보여주고 싶습니다.

2. 개념 모델링
	마이페이지					프로필 (경로 크기 이름)
	ID						ID
	대표이미지					회원 
	회원 						이미지	
							대표이미지
3. 논리 모델링
	프로필
	ID PK					
	IS_MAIN T OR F
	이미지 경로
	이미지 크기
	이미지 이름
	회원 ID FK
			 
4. 물리 모델링
	TBL_PROFILE
	ID NUMBER PK
	IMAGES_PATH		
	IMAGES_SIZE
	IMAGES_NAME
	IS_MAIN UK
	MEMBER_ID FK
5. 구현

※ 파일
   경로, 크기, 이름
*/

CREATE TABLE TBL_FILE(
   ID NUMBER CONSTRAINT PK_FILE PRIMARY KEY,
   FILE_SIZE NUMBER DEFAULT 0,
   FILE_PATH VARCHAR2(1000) NOT NULL,
   FILE_NAME VARCHAR2(1000) NOT NULL,
   FILE_STATUS VARCHAR2(1000) DEFAULT '일반',
   MEMBER_ID NUMBER NOT NULL,
   CONSTRAINT FK_FILE_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID)
);

/*
1. 요구 사항
    회원들끼리 좋아요를 누를 수 있습니다.

2. 개념 모델링
	회원 프로필
	ID
	좋아요 참거
	팔로워(나를 조아요)
	팔로잉(내가 조아요)
	멤버ID
	
3. 논리 모델링
	ID PK,
	LIKE DEFAULT '일반',
	FOLLOWER NUMBER DEFAULT 0,
	FOLLOWING NUMBER DEFAULT 0,
	MEMBER_ID FK
	
4. 물리 모델링
	TBL_PROFILE
	ID PK
	PROFILE_LIKE DEFAULT '일반',
	PROFILE_FOLLOWER NUMBER DEFAULT 0,
	PROFILE_FOLLOWING NUMBER DEFAULT 0,
	MEMBER_ID FK
5. 구현
*/
CREATE TABLE TBL_LIKE(
   ID NUMBER CONSTRAINT PK_LIKE PRIMARY KEY,
   LIKE_RECEIVER NUMBER NOT NULL,
   LIKE_SENDER NUMBER NOT NULL,
   CONSTRAINT FK_LIKE_MEMBER_RECEIVER FOREIGN KEY(LIKE_RECEIVER)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_LIKE_MEMBER_SENDER FOREIGN KEY(LIKE_SENDER)
   REFERENCES TBL_MEMBER(ID)
);

/*
    1. 요구사항 분석
        안녕하세요 중고차 딜러입니다.
        이번에 자동차와 차주를 관리하고자 방문했습니다.
        자동차는 여러 명의 차주로 히스토리에 남아야 하고,
        차주는 여러 대의 자동차를 소유할 수 있습니다.
        그래서 우리는 항상 등록증(Registration)을 작성합니다.
        자동차는 브랜드, 모델명, 가격, 출시날짜가 필요하고
        차주는 이름, 전화번호, 주소가 필요합니다.

    2. 개념 모델링
    자동차				차주					등록증
    ID					ID					ID
    브랜드				이름					차주 ID
    모델명				전화번호				자동차 ID
    가격					주소
    출시날짜
    등록증ID
    차주ID
    
    3. 논리 모델링
    자동차				차주					등록증
    ID PK				ID PK				ID PK
    브랜드 V2				이름	V2				차주 ID FK
    모델명 V2				전화번호 V2			자동차 ID FK
    가격	N NN			주소 V2
    출시날짜 DATE

    4. 물리 모델링
    CAR 				OWNER				REGISTRATION
    ID PK				ID PK				ID PK
    BRAND V2			NAME V2				OWNER_ID FK
    NAME V2				PHONE V2			CAR_ID FK
    PRICE NUMBER		ADDRESS V2		
    RELEASE_DATE DATE	
    5. 구현
*/
CREATE TABLE TBL_OWNER(
	ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
	OWNER_NAME VARCHAR2(1000) NOT NULL,
	OWNER_PHONE VARCHAR2(1000) UNIQUE NOT NULL,
	OWNER_ADDRESS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CAR(
	ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_BRAND VARCHAR2(1000) NOT NULL,
	CAR_NAME VARCHAR2(1000) NOT NULL,
	CAR_PRICE NUMBER,
	CAR_RELEASE_DATE DATE
);


CREATE TABLE TBL_REGISTRATION(
	ID NUMBER CONSTRAINT PK_REGISTRATION PRIMARY KEY,
	OWNER_ID NUMBER,
	CONSTRAINT FK_REGISTRATION_OWNER FOREIGN KEY(OWNER_ID)
    REFERENCES TBL_OWNER(ID),
    CAR_ID NUMBER,
	CONSTRAINT FK_REGISTRATION_CAR FOREIGN KEY(CAR_ID)
    REFERENCES TBL_CAR(ID)
);

/*
1. 요구사항

    학사 관리 시스템에 학생과 교수, 과목을 관리합니다.
    학생은 학번, 이름, 전공, 학년이 필요하고
    교수는 교수 번호, 이름, 전공, 직위가 필요합니다.
    과목은 고유한 과목 번호와 과목명, 학점이 필요합니다.
    학생은 여러 과목을 수강할 수 있으며,
    교수는 여러 과목을 강의할 수 있습니다.
    학생이 수강한 과목은 성적(점수)이 모두 기록됩니다.
    
2. 개념 모델링
	학생							교수								과목
	학번							번호								ID
	이름							이름								과목명
	전공							전공								학점
	학년							직위								학생ID
																교수ID
3. 논리 모델링
	학생							교수								과목
------------------------------------------------------------------------
	학번	PK						번호	PK							ID PK
	이름 NN						이름	NN							과목명 UK
	전공	NN						전공	NN							학점 NUM
	학년	NN						직위	NN							학생ID FK
																교수ID FK
4. 물리 모델링
	STUDENT						PROFESSOR						SUBJECT
	-------------------------------------------------------------------
	ID PK						ID PK							ID PK
	NAME NOT NULL				NAME NOT NULL					NAME UNIQUE
	MAJOR						SPECIALTY						CREDIT
	GRADE						POSITION						STUDENT_ID
																PROFESSOR_ID
5. 구현
ALTER TABLE TBL_STUDENT ADD SUBJECT_ID NUMBER NOT NULL;
ALTER TABLE TBL_STUDENT ADD CONSTRAINT FK_STUDENT_SUBJECT FOREIGN KEY(SUBJECT_ID)
REFERENCES TBL_SUBJECT(ID);
*/
CREATE TABLE TBL_STUDENT(
   ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
   STUDENT_NAME VARCHAR2(1000) NOT NULL,
   STUDENT_MAJOR VARCHAR2(1000) NOT NULL,
   STUDENT_GRADE NUMBER DEFAULT 1
);

CREATE TABLE TBL_PROFESSOR(
   ID NUMBER CONSTRAINT PK_PROFESSOR PRIMARY KEY,
   PROFESSOR_NAME VARCHAR2(1000) NOT NULL,
   PROFESSOR_MAJOR VARCHAR2(1000) NOT NULL,
   PROFESSOR_POSITION VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_SUBJECT(
   ID NUMBER CONSTRAINT PK_SUBJECT PRIMARY KEY,
   SUBJECT_NAME VARCHAR2(1000) NOT NULL,
   SUBEJCT_SCORE NUMBER(3, 2) DEFAULT 0.0
);

CREATE TABLE TBL_STUDENT_SUBJECT(
   ID NUMBER CONSTRAINT PK_STUDENT_SUBJECT PRIMARY KEY,   
   STUDENT_ID NUMBER NOT NULL,
   SUBJECT_ID NUMBER NOT NULL,
   CONSTRAINT FK_STUDENT_SUBJECT_STUDENT FOREIGN KEY(STUDENT_ID)
   REFERENCES TBL_STUDENT(ID),
   CONSTRAINT FK_STUDENT_SUBJECT_SUBJECT FOREIGN KEY(SUBJECT_ID)
   REFERENCES TBL_SUBJECT(ID)
);

CREATE TABLE TBL_LECTURE(
   ID NUMBER CONSTRAINT PK_LECTURE PRIMARY KEY,
   PROFESSOR_ID NUMBER,
   SUBJECT_ID NUMBER NOT NULL,
   CONSTRAINT FK_LECTURE_PROFESSOR FOREIGN KEY(PROFESSOR_ID)
   REFERENCES TBL_PROFESSOR(ID),
   CONSTRAINT FK_LECTURE_SUBJECT FOREIGN KEY(SUBJECT_ID)
   REFERENCES TBL_SUBJECT(ID)
);

/*
1. 요구사항
    대카테고리, 소카테고리가 필요해요.
    
2. 개념 모델링
	대카테고리						소카테고리
	ID							ID
	소카ID
3. 논리 모델링
	대카							소카
	ID PK						ID PK
	소카 ID FK
4. 물리 모델링
	MAIN_CATEGORY				CATEGORY_A
	ID PK						ID PK
								MAIN_CATEGORY ID FK
5. 구현
*/

CREATE TABLE TBL_CATEGORY_A(
   ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
   CATEGORY_A_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CATEGORY_B(
   ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
   CATEGORY_B_NAME VARCHAR2(1000) NOT NULL,
   CATEGORY_A_ID NUMBER NOT NULL,
   CONSTRAINT FK_CATEGORY_B_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
   REFERENCES TBL_CATEGORY_A(ID)
);

/*
1. 요구사항
   회의실 예약 서비스를 제작하고 싶습니다.
   회원별로 등급이 존재하고 사무실마다 회의실이 여러 개 있습니다.
   회의실 이용 가능 시간은 파트 타임으로서 여러 시간대가 존재합니다.
    
2. 구현
*/
CREATE TABLE TBL_OFFICE(
   ID NUMBER CONSTRAINT PK_OFFICE PRIMARY KEY,
   OFFICE_NAME VARCHAR2(1000) NOT NULL,
   OFFICE_LOCATION VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CONFERENCE_ROOM(
   ID NUMBER CONSTRAINT PK_CONFERENCE_ROOM PRIMARY KEY,
   OFFICE_ID NUMBER NOT NULL,
   CONSTRAINT FK_CONFERENCE_ROOM_OFFICE FOREIGN KEY(OFFICE_ID)
   REFERENCES TBL_OFFICE(ID)
);

CREATE TABLE TBL_PART_TIME(
   ID NUMBER CONSTRAINT PK_PART_TIME PRIMARY KEY,
   START_TIME DATE NOT NULL,
   END_TIME DATE NOT NULL,
   CONFERENCE_ROOM_ID NUMBER NOT NULL,
   CONSTRAINT FK_PART_TIME_CONFERENCE_ROOM FOREIGN KEY(CONFERENCE_ROOM_ID)
   REFERENCES TBL_CONFERENCE_ROOM(ID)
);

CREATE TABLE TBL_RESERVATION(
   ID NUMBER CONSTRAINT PK_RESERVATION PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   PART_TIME_ID NUMBER NOT NULL,
   CONSTRAINT FK_RESERVATION_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_RESERVATION_PART_TIME FOREIGN KEY(PART_TIME_ID)
   REFERENCES TBL_PART_TIME(ID)
);

/*
1. 요구사항
   유치원을 하려고 하는데, 아이들이 체험학습 프로그램을 신청해야 합니다.
   아이들 정보는 이름, 나이, 성별이 필요하고 학부모는 이름, 나이, 주소, 전화번호, 성별이 필요해요
   체험학습은 체험학습 제목, 체험학습 내용, 이벤트 이미지 여러 장이 필요합니다.
   아이들은 여러 번 체험학습에 등록할 수 있어요.
    
2. 구현
*/
CREATE TABLE TBL_CHILDREN(
	ID NUMBER CONSTRAINT PK_CHILDREN PRIMARY KEY,
	CHILDREN_NAME VARCHAR2(1000) NOT NULL,
	CHILDREN_AGE NUMBER(2) CONSTRAINT CHECK_CHILDREN_AGE CHECK(CHILDREN_AGE > 0),
	CHILDREN_SEX VARCHAR2(1000) NOT NULL,
	PARENTS_ID NUMBER NOT NULL,
	CONSTRAINT FK_CHILDREN_PARENTS FOREIGN KEY(PARENTS_ID)
	REFERENCES TBL_PARENTS(ID)
);
CREATE TABLE TBL_PARENTS(
	ID NUMBER CONSTRAINT PK_PARENTS PRIMARY KEY,
	PARENTS_NAME VARCHAR2(1000) NOT NULL,
	PARENTS_AGE NUMBER(3) CONSTRAINT CHECK_PARENTS_AGE CHECK(PARENTS_AGE > 0),
	PARENTS_ADDRESS VARCHAR2(1000) NOT NULL,
	PARENTS_PHONE VARCHAR2(1000) NOT NULL,
	PARENTS_SEX VARCHAR2(1000) NOT NULL
);



CREATE TABLE TBL_FIELD_TRIP(
	ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
	FIELD_TRIP_NAME VARCHAR2(1000) NOT NULL,
	FIELD_TRIP_CONTENTS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_TRIP_IMAGES(
	ID NUMBER CONSTRAINT PK_TRIP_IMAGES PRIMARY KEY,
	TRIP_IMAGES_SIZE NUMBER DEFAULT 0,
  	TRIP_IMAGES_PATH VARCHAR2(1000) NOT NULL,
   	TRIP_IMAGES_NAME VARCHAR2(1000) NOT NULL,
   	FIELD_TRIP_ID NUMBER NOT NULL,
   	CONSTRAINT FK_TRIP_IMAGES_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   	REFERENCES TBL_FIELD_TRIP(ID)
);

CREATE TABLE TBL_APPLY_FIELD_TRIP(
	ID NUMBER CONSTRAINT PK_APPLY_FIELD_TRIP PRIMARY KEY,
	FIELD_TRIP_ID NUMBER NOT NULL,
   	CONSTRAINT FK_APPLY_FIELD_TRIP_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   	REFERENCES TBL_FIELD_TRIP(ID),
   	CHILDREN_ID NUMBER NOT NULL,
	CONSTRAINT FK_APPLY_FIELD_TRIP_CHILDREN FOREIGN KEY(CHILDREN_ID)
	REFERENCES TBL_CHILDREN(ID)
);


/*
1. 요구사항
   유치원을 하려고 하는데, 아이들이 체험학습 프로그램을 신청해야 합니다.
   아이들 정보는 이름, 나이, 성별이 필요하고 학부모는 이름, 나이, 주소, 전화번호, 성별이 필요해요
   체험학습은 체험학습 제목, 체험학습 내용, 이벤트 이미지 여러 장이 필요합니다.
   아이들은 여러 번 체험학습에 등록할 수 있어요.
    
2. 구현
*/
CREATE TABLE TBL_KINDERGARTEN(
   ID NUMBER CONSTRAINT PK_KINDERGARTEN PRIMARY KEY,
   KINDERGARTEN_NAME VARCHAR2(1000) NOT NULL,
   KINDERGARTEN_ADDRESS VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_PARENT(
   ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
   PARENT_NAME VARCHAR2(1000) NOT NULL,
   PARENT_ADDRESS VARCHAR2(1000) NOT NULL,
   PARENT_PHONE VARCHAR2(1000) NOT NULL,
   PARENT_GENDER VARCHAR2(1000) DEFAULT '선택 안함'
);

CREATE TABLE TBL_CHILD(
   ID NUMBER CONSTRAINT PK_CHILD PRIMARY KEY,
   CHILD_AGE NUMBER NOT NULL,
   CHILD_GENDER VARCHAR2(1000) DEFAULT '여아',
   PARENT_ID NUMBER NOT NULL,
   CONSTRAINT FK_CHILD_PARENT FOREIGN KEY(PARENT_ID)
   REFERENCES TBL_PARENT(ID)
);

CREATE TABLE TBL_FIELD_TRIP(
   ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
   FIELD_TRIP_TITLE VARCHAR2(1000) NOT NULL,
   FIELD_TRIP_CONTENT VARCHAR2(1000) NOT NULL,
   KINDERGARTEN_ID NUMBER NOT NULL,
   CONSTRAINT FK_FIELD_TRIP_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);

CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(1000) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_AGE NUMBER(3) CONSTRAINT CHECK_AGE CHECK(MEMBER_AGE > 0),
   KINDERGARTEN_ID NUMBER NOT NULL,
   CONSTRAINT FK_MEMBER_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);

CREATE TABLE TBL_APPLY(
   ID NUMBER CONSTRAINT PK_APPLY PRIMARY KEY,
   CHILD_ID NUMBER NOT NULL,
   FIELD_TRIP_ID NUMBER NOT NULL,
   CONSTRAINT FK_APPLY_CHILD FOREIGN KEY(CHILD_ID)
   REFERENCES TBL_CHILD(ID),
   CONSTRAINT FK_APPLY_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   REFERENCES TBL_FIELD_TRIP(ID)
);

/*
1. 요구사항
   안녕하세요, 광고 회사를 운영하려고 준비중인 사업가입니다.
   광고주는 기업이고 기업 정보는 이름, 주소, 대표번호, 기업종류(스타트업, 중소기업, 중견기업, 대기업)입니다.
   광고는 제목, 내용이 있고 기업은 여러 광고를 신청할 수 있습니다.
   기업이 광고를 선택할 때에는 카테고리로 선택하며, 대카테고리, 중카테고리, 소카테고리가 있습니다.
 
2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/
CREATE TABLE TBL_COMPANY(
	ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
	COMPANY_NAME VARCHAR2(1000) UNIQUE NOT NULL,
	COMPANY_ADDRESS VARCHAR2(1000) NOT NULL,
	COMPANY_PHONE VARCHAR2(1000) NOT NULL,
	COMPANY_TYPE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_ADVERTISING(
	ID NUMBER CONSTRAINT PK_ADVERTISING PRIMARY KEY,
	ADVERTISING_TITLE VARCHAR2(1000) NOT NULL,
	ADVERTISING_CONTENTS VARCHAR2(1000) NOT NULL,
	CATEGORY_C_ID NUMBER NOT NULL,
    CONSTRAINT FK_ADVERTISING_CATEGORY_C FOREIGN KEY(CATEGORY_C_ID)
    REFERENCES TBL_CATEGORY_C(ID)
);

CREATE TABLE TBL_APPLY(
   ID NUMBER CONSTRAINT PK_APPLY PRIMARY KEY,
   COMPANY_ID NUMBER NOT NULL,
   ADVERTISING_ID NUMBER NOT NULL,
   CONSTRAINT FK_APPLY_COMPANY FOREIGN KEY(COMPANY_ID)
   REFERENCES TBL_COMPANY(ID),
   CONSTRAINT FK_APPLY_ADVERTISING FOREIGN KEY(ADVERTISING_ID)
   REFERENCES TBL_ADVERTISING(ID)
);

CREATE TABLE TBL_CATEGORY_A(
   ID NUMBER CONSTRAINT PK_CATEGORY_A PRIMARY KEY,
   CATEGORY_A_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CATEGORY_B(
   ID NUMBER CONSTRAINT PK_CATEGORY_B PRIMARY KEY,
   CATEGORY_B_NAME VARCHAR2(1000) NOT NULL,
   CATEGORY_A_ID NUMBER NOT NULL,
   CONSTRAINT FK_CATEGORY_B_CATEGORY_A FOREIGN KEY(CATEGORY_A_ID)
   REFERENCES TBL_CATEGORY_A(ID)
);

CREATE TABLE TBL_CATEGORY_C(
   ID NUMBER CONSTRAINT PK_CATEGORY_C PRIMARY KEY,
   CATEGORY_C_NAME VARCHAR2(1000) NOT NULL,
   CATEGORY_B_ID NUMBER NOT NULL,
   CONSTRAINT FK_CATEGORY_C_CATEGORY_B FOREIGN KEY(CATEGORY_B_ID)
   REFERENCES TBL_CATEGORY_B(ID)
);

/*
1. 요구사항
   음료수 판매 업체입니다. 음료수마다 당첨번호가 있습니다. 
   음료수의 당첨번호는 1개이고 당첨자의 정보를 알아야 상품을 배송할 수 있습니다.
   당첨 번호마다 당첨 상품이 있고, 당첨 상품이 배송 중인지 배송 완료인지 구분해야 합니다.

2. 개념 모델링	
3. 논리 모델링
4. 물리 모델링
5. 구현
*/
/*CREATE TABLE TBL_DELIVERY(
	ID NUMBER CONSTRAINT PK_DELIVERY PRIMARY KEY,
	DELIVERY_SHIPPED VARCHAR2(1000) NOT NULL,
	DELIVERY_DELIVERED VARCHAR2(1000) NOT NULL,
	WINNER_ID NUMBER NOT NULL,
	CONSTRAINT FK_DELIVERY_WINNER FOREIGN KEY(WINNER_ID)
	REFERENCES TBL_WINNER(ID)
);

CREATE TABLE TBL_SELL(
	ID NUMBER CONSTRAINT PK_SELL PRIMARY KEY, 
	BEVERAGES_ID NUMBER NOT NULL,
	CONSTRAINT FK_SELL_BEVERAGES FOREIGN KEY(BEVERAGES_ID)
	REFERENCES TBL_BEVERAGES(ID),
	WINNER_ID NUMBER NOT NULL,
	CONSTRAINT FK_SELL_WINNER FOREIGN KEY(WINNER_ID)
	REFERENCES TBL_WINNER(ID),
	DELIVERY_ID NUMBER NOT NULL,
	CONSTRAINT FK_SELL_DELIVERY FOREIGN KEY(DELIVERY_ID)
	REFERENCES TBL_DELIVERY(ID)
);

CREATE TABLE TBL_BEVERAGES(
	ID NUMBER CONSTRAINT PK_BEVERAGES PRIMARY KEY,
	BEVERAGES_NAME VARCHAR2(1000) NOT NULL,
	BEVERAGES_TYPE VARCHAR2(1000) NOT NULL,
	BEVERAGES_PRICE NUMBER NOT NULL,	
	NUMBERS_ID NUMBER NOT NULL,
	CONSTRAINT FK_BEVERAGES_NUMBERS FOREIGN KEY(NUMBERS_ID)
	REFERENCES TBL_NUMBERS(ID)
);

CREATE TABLE TBL_NUMBERS(
	ID NUMBER CONSTRAINT PK_NUMBERS PRIMARY KEY,
	PRIZE_ID NUMBER NOT NULL,
	CONSTRAINT FK_NUMBERS_PRIZE FOREIGN KEY(PRIZE_ID)
	REFERENCES TBL_PRIZE(ID)
);

CREATE TABLE TBL_PRIZE(
	ID NUMBER CONSTRAINT PK_PRIZE PRIMARY KEY,
	PRIZE_NAME VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_WINNER(
	ID NUMBER CONSTRAINT PK_WINNER PRIMARY KEY,
	WINNER_NAME VARCHAR2(1000) NOT NULL,
	WINNER_ADDRESS VARCHAR2(1000) NOT NULL,
	WINNER_PHONE VARCHAR2(1000) UNIQUE NOT NULL
);*/


/*
1. 요구사항
   이커머스 창업 준비중입니다. 
   기업과 사용자 간 거래를 위해 기업의 정보와 사용자 정보가 필요합니다.
   기업의 정보는 기업 이름, 주소, 대표번호가 있고
   사용자 정보는 이름, 주소, 전화번호가 있습니다. 
   결제 시 사용자 정보와 기업의 정보, 결제한 카드의 정보 모두 필요하며,
   상품의 정보도 필요합니다. 상품의 정보는 이름, 가격, 재고입니다.
   사용자는 등록한 카드의 정보를 저장할 수 있으며, 
   카드의 정보는 카드번호, 카드사, 회원 정보가 필요합니다.

2. 개념 모델링
	기업  상품  결제 카드 사용자
			   
3. 논리 모델링
4. 물리 모델링
5. 구현
*/
/*
CREATE TABLE TBL_PAYMENT(
	ID NUMBER CONSTRAINT PK_PAYMENT PRIMARY KEY,
	GOODS_ID NUMBER NOT NULL,
	CONSTRAINT FK_PAYMENT_GOODS FOREIGN KEY(GOODS_ID)
	REFERENCES TBL_GOODS(ID),
	CREADITCARD_ID NUMBER NOT NULL,
	CONSTRAINT FK_PAYMENT_CREADITCARD FOREIGN KEY(CREADITCARD_ID)
	REFERENCES TBL_CREADITCARD(ID)
);

CREATE TABLE TBL_GOODS(
	ID NUMBER CONSTRAINT PK_GOODS PRIMARY KEY,
	GOODS_NAME VARCHAR2(1000) NOT NULL,
	GOODS_PRICE NUMBER NOT NULL,
	GOODS_QUANTITY NUMBER DEFAULT 0,
	ENTERPRISE_ID NUMBER NOT NULL,
	CONSTRAINT FK_GOODS_ENTERPRISE FOREIGN KEY(ENTERPRISE_ID)
	REFERENCES TBL_ENTERPRISE(ID)
);

CREATE TABLE TBL_ENTERPRISE(
	ID NUMBER CONSTRAINT PK_ENTERPRISE PRIMARY KEY,
	ENTERPRISE_NAME VARCHAR2(1000) NOT NULL,
	ENTERPRISE_ADDRESS VARCHAR2(1000) NOT NULL,
	ENTERPRISE_PHONE VARCHAR2(1000) UNIQUE NOT NULL
);

CREATE TABLE TBL_CREADITCARD(
	ID NUMBER CONSTRAINT PK_CREADITCARD PRIMARY KEY,
	CREADITCARD_NUMBER NUMBER NOT NULL,
	CREADITCARD_COMPANY VARCHAR2(1000) NOT NULL,
	CUSTOMER_ID NUMBER NOT NULL,
	CONSTRAINT FK_CREADITCARD_CUSTOMER FOREIGN KEY(CUSTOMER_ID)
	REFERENCES TBL_CUSTOMER(ID)
);

CREATE TABLE TBL_CUSTOMER(
	ID NUMBER CONSTRAINT PK_CUSTOMER PRIMARY KEY,
	CUSTOMER_NAME VARCHAR2(1000) NOT NULL,
	CUSTOMER_ADDRESS VARCHAR2(1000) NOT NULL,
	CUSTOMER_PHONE VARCHAR2(1000) UNIQUE NOT NULL
);
*/

/*
1. 요구사항
   음료수 판매 업체입니다. 음료수마다 당첨번호가 있습니다. 
   음료수의 당첨번호는 1개이고 당첨자의 정보를 알아야 상품을 배송할 수 있습니다.
   당첨 번호마다 당첨 상품이 있고, 당첨 상품이 배송 중인지 배송 완료인지 구분해야 합니다.

2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/
CREATE TABLE TBL_SOFT_DRINK(
   ID NUMBER CONSTRAINT PK_SOFT_DRINK PRIMARY KEY,
   SOFT_DRINK_NAME VARCHAR2(1000)
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_LOTTERY(
   ID NUMBER CONSTRAINT PK_LOTTERY PRIMARY KEY,
   LOTTERY_NUMBER VARCHAR2(1000) NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_LOTTERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

CREATE TABLE TBL_CIRCULATION(
   ID NUMBER CONSTRAINT PK_CIRCULATION PRIMARY KEY,
   SOFT_DRINK_ID NUMBER NOT NULL,
   LOTTERY_ID NUMBER NOT NULL,
   CONSTRAINT FK_CIRCULATION_SOFT_DRINK FOREIGN KEY(SOFT_DRINK_ID)
   REFERENCES TBL_SOFT_DRINK(ID),
   CONSTRAINT FK_CIRCULATION_LOTTERY FOREIGN KEY(LOTTERY_ID)
   REFERENCES TBL_LOTTERY(ID)
);

DROP TABLE TBL_MEMBER;
CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_EMAIL VARCHAR2(1000) UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(1000) NOT NULL,
   MEMBER_NAME VARCHAR2(1000) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(1000) NOT NULL,
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_DILIVERY(
   ID NUMBER CONSTRAINT PK_DILIVERY PRIMARY KEY,
   MEMBER_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   DILEVERY_STATUS VARCHAR2(1000) DEFAULT '배송 준비 중',
   CONSTRAINT FK_DILEVERY_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_DILEVERY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

/*
1. 요구사항
   이커머스 창업 준비중입니다. 기업과 사용자 간 거래를 위해 기업의 정보와 사용자 정보가 필요합니다.
   기업의 정보는 기업 이름, 주소, 대표번호가 있고
   사용자 정보는 이름, 주소, 전화번호가 있습니다. 결제 시 사용자 정보와 기업의 정보, 결제한 카드의 정보 모두 필요하며,
   상품의 정보도 필요합니다. 상품의 정보는 이름, 가격, 재고입니다.
   사용자는 등록한 카드의 정보를 저장할 수 있으며, 카드의 정보는 카드번호, 카드사, 회원 정보가 필요합니다.

2. 개념 모델링
3. 논리 모델링
4. 물리 모델링
5. 구현
*/

DROP TABLE TBL_APPLY;
DROP TABLE TBL_COMPANY;

CREATE TABLE TBL_COMPANY(
   ID NUMBER CONSTRAINT PK_COMPANY PRIMARY KEY,
   COMPANY_NAME VARCHAR2(1000) NOT NULL,
   COMPANY_ADDRESS VARCHAR2(1000) NOT NULL,
   COMPANY_TEL VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CLIENT(
   ID NUMBER CONSTRAINT PK_CLIENT PRIMARY KEY,
   CLIENT_NAME VARCHAR2(1000) NOT NULL,
   CLIENT_ADDRESS VARCHAR2(1000) NOT NULL,
   CLIENT_PHONE VARCHAR2(1000) NOT NULL
);

CREATE TABLE TBL_CARD(
   ID NUMBER CONSTRAINT PK_CARD PRIMARY KEY,
   CARD_NUMBER VARCHAR2(1000) NOT NULL,
   CARD_COMPANY VARCHAR2(1000) NOT NULL,
   CLIENT_ID NUMBER NOT NULL,
   CONSTRAINT FK_CARD_CLIENT FOREIGN KEY(CLIENT_ID)
   REFERENCES TBL_CLIENT(ID)
);

DROP TABLE TBL_CIRCULATION;
DROP TABLE TBL_LOTTERY;
DROP TABLE TBL_DILIVERY;
DROP TABLE TBL_PRODUCT;

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(1000) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0,
   COMPANY_ID NUMBER NOT NULL,
   CONSTRAINT FK_PRODUCT_COMPANY FOREIGN KEY(COMPANY_ID)
   REFERENCES TBL_COMPANY(ID)
);

CREATE TABLE TBL_PAY(
   ID NUMBER CONSTRAINT PK_PAY PRIMARY KEY,
   CARD_ID NUMBER NOT NULL,
   PRODUCT_ID NUMBER NOT NULL,
   CONSTRAINT FK_PAY_CARD FOREIGN KEY(CARD_ID)
   REFERENCES TBL_CARD(ID),
   CONSTRAINT FK_PAY_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);















